@Глобально
метод Тест(Имя: Строка, Содержимое: () -> ничто)
    если Имя.Пусто()
        выбросить новый ИсключениеВалидации("Имя теста не должно быть пустым")
    ;
    знч Тест = новый ЭлементНабораТестов(Имя, Содержимое, МодульТестов)
    Тест.СформироватьИдентификатор()
    если СодержитТест(Тест)
        выбросить новый ИсключениеВалидации("Тест \"%{Тест.Идентификатор}\" уже существует")
    ;
    Тесты.Добавить(Тест)
;

@Глобально
метод ПередКаждым(Содержимое: () -> ничто)
    ПередКаждым = новый ЭлементНабораТестов("", Содержимое)
;

@Глобально
метод ПослеКаждого(Содержимое: () -> ничто)
    ПослеКаждого = новый ЭлементНабораТестов("", Содержимое)
;

@ВПодсистеме
метод Запустить()
    Статус = СтатусТестов.Выполняется
    пер БылПровал = Ложь
    для Тест из Тесты
        пер Сообщение: Строка
        пер СтатусТеста = СтатусТестов.Выполняется
        попытка
            ВызватьОбработчикСобытия(ПередКаждым)
            Тест.Содержимое()
            ВызватьОбработчикСобытия(ПослеКаждого)
            Сообщение = "✅ %{Тест.Имя}"
            СтатусТеста = СтатусТестов.Выполнен
        поймать Исключение: неизвестно
            Сообщение = "❌ %{Тест.Имя} - %{Исключение.ВСтроку()}"
            БылПровал = Истина
            СтатусТеста = СтатусТестов.Провален
        ;
        Результаты.Добавить(
            новый РезультатВыполненияТеста(
                СтатусТеста,
                Тест.Имя,
                Сообщение
            )
        )
    ;
    если БылПровал
        Статус = СтатусТестов.Провален
    иначе
        Статус = СтатусТестов.Выполнен    
    ;
;

метод ВызватьОбработчикСобытия(Событие: ЭлементНабораТестов?)
    если Событие != Неопределено
        Событие.Содержимое()
    ;
;

метод СодержитТест(Тест: ЭлементНабораТестов): Булево
    возврат не Тесты.Фильтровать((Элемент) -> Элемент.Имя == Тест.Имя).Пусто()    
;
